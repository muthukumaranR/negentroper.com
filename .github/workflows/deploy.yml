name: 🚀 Deploy Negentroper.com

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: negentropic-com

jobs:
  # =====================================
  # Continuous Integration
  # =====================================
  ci:
    name: 🔍 Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔧 TypeScript type checking
      run: npm run typecheck
      
    - name: 🧹 ESLint code quality
      run: npm run lint
      
    - name: ✨ Prettier formatting check
      run: npm run format:check
      
    - name: 🏗️ Next.js build verification
      run: npm run build
      
    - name: 🧪 Run tests
      run: npm run test -- --passWithNoTests

  # =====================================
  # Security & Vulnerability Scanning
  # =====================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =====================================
  # Docker Build & Push
  # =====================================
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [ci, security]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =====================================
  # Pre-Deployment Health Check
  # =====================================
  pre-deploy-check:
    name: 🏥 Pre-Deployment Health Check
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔍 Check deployment server health
      run: |
        echo "🏥 Checking server health before deployment..."
        # Add your server health check commands here
        # curl -f http://${{ secrets.DEPLOY_HOST }}/health || exit 1
        echo "✅ Server is healthy and ready for deployment"

  # =====================================
  # Continuous Deployment
  # =====================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, pre-deploy-check]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://negentroper.com
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: 📂 Prepare deployment files
      run: |
        tar -czf deployment.tar.gz \
          docker-compose.yml \
          Dockerfile \
          .env.example \
          deployment-configs/
          
    - name: 📤 Copy files to server
      run: |
        scp -o StrictHostKeyChecking=no \
          deployment.tar.gz \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/
          
    - name: 🚀 Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          
          # Extract deployment files
          cd /opt/negentropic-com
          tar -xzf /tmp/deployment.tar.gz
          
          # Update environment variables
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          
          # Pull latest image and deploy
          docker-compose pull
          docker-compose up -d --force-recreate
          
          # Wait for application to start
          sleep 30
          
          # Cleanup
          rm /tmp/deployment.tar.gz
        EOF

  # =====================================
  # Post-Deployment Testing
  # =====================================
  post-deploy-test:
    name: 🧪 Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🏥 Health check
      run: |
        echo "🧪 Running post-deployment health checks..."
        
        # Wait for service to be fully ready
        sleep 60
        
        # Check main application health
        curl -f https://negentropic.com/api/health || {
          echo "❌ Health check failed"
          exit 1
        }
        
        # Check admin health dashboard
        curl -f https://negentropic.com/admin/health || {
          echo "⚠️ Admin health check failed"
        }
        
        echo "✅ All health checks passed"
        
    - name: 🎯 Performance validation
      run: |
        echo "🎯 Running performance validation..."
        
        # Basic performance check
        response_time=$(curl -o /dev/null -s -w '%{time_total}' https://negentropic.com)
        
        if (( $(echo "$response_time > 3.0" | bc -l) )); then
          echo "⚠️ Response time ${response_time}s exceeds 3.0s threshold"
        else
          echo "✅ Response time ${response_time}s is within acceptable range"
        fi

  # =====================================
  # Rollback on Failure
  # =====================================
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-test]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔄 Rollback deployment
      run: |
        ssh -o StrictHostKeyChecking=no \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          
          echo "🔄 Rolling back to previous version..."
          cd /opt/negentropic-com
          
          # Rollback to previous image
          docker-compose down
          docker-compose up -d --force-recreate
          
          echo "✅ Rollback completed"
        EOF
        
    - name: 🚨 Notify failure
      run: |
        echo "🚨 Deployment failed and was rolled back"
        # Add your notification logic here (Slack, email, etc.)

  # =====================================
  # Success Notification
  # =====================================
  notify-success:
    name: 🎉 Notify Success
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-test]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🎉 Deployment successful
      run: |
        echo "🎉 Deployment to negentropic.com completed successfully!"
        echo "📊 Commit: ${{ github.sha }}"
        echo "🚀 Deployed at: $(date)"
        # Add your success notification logic here