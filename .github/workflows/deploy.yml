name: 🚀 Deploy Negentroper.com

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: negentropic-com

jobs:
  # =====================================
  # Continuous Integration
  # =====================================
  ci:
    name: 🔍 Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: 📦 Install dependencies
      run: pnpm install
      
    - name: 🔧 TypeScript type checking
      run: pnpm typecheck
      
    - name: 🧹 ESLint code quality
      run: pnpm lint
      
    - name: ✨ Prettier formatting check
      run: pnpm format:check
      
    - name: 🏗️ Next.js build verification
      run: pnpm build
      
    - name: 🧪 Run tests
      run: pnpm test -- --passWithNoTests

  # =====================================
  # Security & Vulnerability Scanning
  # =====================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =====================================
  # Build & Package
  # =====================================
  build:
    name: 📦 Build and Package
    runs-on: ubuntu-latest
    needs: [ci, security]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: 📦 Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: 🏗️ Build static site
      run: pnpm build
      
    - name: 📦 Create deployment package
      run: |
        tar -czf deployment-package.tar.gz \
          out \
          Dockerfile \
          docker-compose.simple.yml \
          nginx.conf \
          deployment-configs/ \
          package.json \
          pnpm-lock.yaml
          
    - name: 📤 Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        retention-days: 1

  # =====================================
  # Pre-Deployment Health Check
  # =====================================
  pre-deploy-check:
    name: 🏥 Pre-Deployment Health Check
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED == 'true'
    
    steps:
    - name: 🔍 Check deployment target
      run: |
        echo "🏥 Checking deployment target..."
        echo "📍 Target: ${{ secrets.DEPLOY_HOST }}"
        echo "👤 User: ${{ secrets.DEPLOY_USER }}"
        echo "📂 Path: ${{ vars.DEPLOY_PATH || '/opt/negentroper-com' }}"
        echo "✅ Ready for deployment"

  # =====================================
  # Continuous Deployment
  # =====================================
  deploy:
    name: 🚀 Deploy to Target
    runs-on: ubuntu-latest
    needs: [build, pre-deploy-check]
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED == 'true'
    
    environment:
      name: production
      url: ${{ vars.DEPLOY_URL || 'http://localhost' }}
      
    steps:
    - name: 📥 Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        
    - name: 🔧 Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: 📤 Copy deployment package to target
      run: |
        scp -o StrictHostKeyChecking=no \
          deployment-package.tar.gz \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/
          
    - name: 🚀 Deploy application
      env:
        DEPLOY_PATH: ${{ vars.DEPLOY_PATH || '/opt/negentroper-com' }}
      run: |
        ssh -o StrictHostKeyChecking=no \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'DEPLOY_SCRIPT'
          
          # Configuration
          DEPLOY_DIR="${DEPLOY_PATH}"
          
          # Create deployment directory if needed
          mkdir -p $DEPLOY_DIR
          cd $DEPLOY_DIR
          
          # Extract deployment package
          echo "📦 Extracting deployment package..."
          tar -xzf /tmp/deployment-package.tar.gz
          
          # Build Docker image locally
          echo "🏗️ Building Docker image..."
          docker build -t negentroper.com:latest .
          
          # Stop existing container
          echo "🛑 Stopping existing container..."
          docker-compose -f docker-compose.simple.yml down || true
          
          # Start new container
          echo "🚀 Starting new container..."
          docker-compose -f docker-compose.simple.yml up -d
          
          # Wait for health check
          echo "⏳ Waiting for container health..."
          sleep 20
          
          # Verify deployment
          if docker ps | grep -q negentroper-web; then
            echo "✅ Deployment successful!"
            docker ps | grep negentroper-web
          else
            echo "❌ Deployment failed!"
            docker logs negentroper-web
            exit 1
          fi
          
          # Cleanup
          rm /tmp/deployment-package.tar.gz
          docker image prune -f
        DEPLOY_SCRIPT

  # =====================================
  # Post-Deployment Testing
  # =====================================
  post-deploy-test:
    name: 🧪 Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED == 'true'
    
    steps:
    - name: 🏥 Health check
      env:
        DEPLOY_URL: ${{ vars.DEPLOY_URL || 'http://${{ secrets.DEPLOY_HOST }}' }}
      run: |
        echo "🧪 Running post-deployment health checks..."
        echo "🌐 Testing URL: ${DEPLOY_URL}"
        
        # Wait for service to be ready
        sleep 30
        
        # Check main site
        if curl -f -s -o /dev/null -w "%{http_code}" "${DEPLOY_URL}/" | grep -q "200"; then
          echo "✅ Main site is accessible"
        else
          echo "❌ Main site health check failed"
          exit 1
        fi
        
        # Check health endpoint
        if curl -f -s "${DEPLOY_URL}/health" | grep -q "healthy"; then
          echo "✅ Health endpoint working"
        else
          echo "⚠️ Health endpoint not responding"
        fi
        
        echo "✅ Deployment verification complete"
        
    - name: 🎯 Performance validation
      run: |
        echo "🎯 Running performance validation..."
        
        # Basic performance check
        response_time=$(curl -o /dev/null -s -w '%{time_total}' https://negentropic.com)
        
        if (( $(echo "$response_time > 3.0" | bc -l) )); then
          echo "⚠️ Response time ${response_time}s exceeds 3.0s threshold"
        else
          echo "✅ Response time ${response_time}s is within acceptable range"
        fi

  # =====================================
  # Rollback on Failure
  # =====================================
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-test]
    if: failure() && github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED == 'true'
    
    steps:
    - name: 🔧 Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: 🔄 Rollback deployment
      env:
        DEPLOY_PATH: ${{ vars.DEPLOY_PATH || '/opt/negentroper-com' }}
      run: |
        ssh -o StrictHostKeyChecking=no \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'ROLLBACK_SCRIPT'
          
          echo "🔄 Rolling back deployment..."
          cd ${DEPLOY_PATH}
          
          # Restart with previous image
          docker-compose -f docker-compose.simple.yml restart
          
          echo "✅ Rollback completed"
        ROLLBACK_SCRIPT
        
    - name: 🚨 Notify failure
      run: |
        echo "🚨 Deployment failed and was rolled back"
        # Add your notification logic here (Slack, email, etc.)

  # =====================================
  # Success Notification
  # =====================================
  notify-success:
    name: 🎉 Notify Success
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-test]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🎉 Deployment successful
      run: |
        echo "🎉 Deployment to negentropic.com completed successfully!"
        echo "📊 Commit: ${{ github.sha }}"
        echo "🚀 Deployed at: $(date)"
        # Add your success notification logic here